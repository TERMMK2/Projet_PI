//--------------------------------------
// Projet_PI.edp -> Méthode de sensibilité
//--------------------------------------
// Fichiers de sortie
ofstream tfile("laplace_hd_1.txt");
//--------------------------------------
// Définition des constantes utiles
//--------------------------------------
// (x0,y0) -> position du trou qui minimise la fonction f considérée
real x0  = 0.5;
real y0  = 0.5;
// r -> taille du trou
real r   = 0.1;
// n -> raffinement du maillage
int n    = 100;
// eps -> condition d'arret
real eps = 10.^-4;
// h -> Pas de déplacement initial du trou (attention à ce que son choix soit compatible avec la position
//      initiale du trou)
real h   = 0.05;
// k -> Compteur d'itérations
int k=0;
//--------------------------------------
// Maillage
//--------------------------------------
// Square
border Gamma1(t=0,1.) {x=t; y=0.;};     //bas
border Gamma2(t=0,1.) {x=1.; y=t;};     //droite
border Gamma3(t=0,1.) {x=1.-t; y=1;};   //haut
border Gamma4(t=0,1.) {x=0.; y=1.-t;};  //gauche
// Circular Hole
border GammaC(t=0., 2.*pi){x=x0+r*cos(t); y=y0+r*sin(t);};
// Création du maillage
mesh Thmin = buildmesh(Gamma1(n)+Gamma2(n)+Gamma3(n)+Gamma4(n)+GammaC(-300));
// Définition de l'espace de discrétisation
fespace Vhmin(Thmin,P1);
Vhmin umin,uhmin;
//--------------------------------------
// Problème initial
//--------------------------------------
problem laplace(umin,uhmin,solver=CG) =
  int2d(Thmin)(dx(umin)*dx(uhmin)+dy(umin)*dy(uhmin))
  +on(Gamma2,umin=1.)
  +on(Gamma4,umin=0.)
  +on(GammaC,umin=0.);
// Résolution de Laplace
laplace;
// plot(umin,fill=true);
plot(Thmin);
// Choix d'un point de départ pour la position du centre du trou
x0             = 0.8;
y0             = 0.8;
// Définition des 2 variables qui nous permettent de connaitre f à l'étape actuelle et f à l'étape précédente
real f1        = 0.;
real f         = 1.;
// Variables utiles pour la boucle de sensibilité
real a         = 1.;
real b         = 1.;
real err       = sqrt(a^2+b^2);
real errpair   = 0.;
real errimpair = 0.;
tfile << -1 << " " << x0 << " " << y0 << " " << 0. << " " << 0. << endl;
//--------------------------------------
// Boucle de sensibilité
//--------------------------------------
while(err > eps)
  {
    //----------------ETAPE 1 : RESOLUTION DU PROBLEME P-----------------------
    border GammaH(t=0, 2*pi){x=x0+r*cos(t); y=y0+r*sin(t);};
    mesh Th = buildmesh(Gamma1(n)+Gamma2(n)+Gamma3(n)+Gamma4(n)+GammaH(-300));
    fespace Vh(Th,P1);
    Vh u,uh,udx,udy;
    problem laplace(u,uh,solver=CG) =
      int2d(Th)(dx(u)*dx(uh)+dy(u)*dy(uh))
      +on(Gamma2,u=1)
      +on(Gamma4,u=0)
      +on(GammaH,u=0);
    laplace;
    udx = dx(u);
    udy = dy(u);
    // Affichage de l'évolution
    // plot(u,fill=true);
    //
    //-----ETAPE 2 : CALCULER LA SOLUTION DU PROBLEME P' DANS 2 DIRECTIONS-----
    //
    //-----------------------ETAPE 2A : DIRECTION (1,0)------------------------
    x0 += h;
    border GammaHpx(t=0, 2*pi){x=x0+r*cos(t); y=y0+r*sin(t);label = 12;};
    mesh Thpx = buildmesh(Gamma1(n)+Gamma2(n)+Gamma3(n)+Gamma4(n)+GammaHpx(-300));
    fespace Vhpx(Thpx,P1);
    Vhpx upx,uhpx,cpx;
    // On récupère la solution de la dérivée de u sur le cercle du problème non-perturbé
    cpx = 0;
    for (int m=0;m<Thpx.nbe;++m) {
      if (Thpx.be(m).label == 12){
        x = Thpx.be(m)[0].x;
        x -= h;
        y = Thpx.be(m)[0].y;
        cpx[][Thpx.be(m)[0]] = -udx(x,y);
      }
    }
    problem laplacepx(upx,uhpx,solver=CG) =
      int2d(Thpx)(dx(upx)*dx(uhpx)+dy(upx)*dy(uhpx))
      +on(Gamma2,upx=0)
      +on(Gamma4,upx=0)
      +on(12,upx=cpx);
    laplacepx;
    real a = int1d(Thmin,Gamma2)(dx(upx)*(dx(u) - dx(umin)));
    + int1d(Thmin,Gamma4)(dx(upx)*(dx(u) - dx(umin)));
    //
    //-----------------------ETAPE 2A : DIRECTION (0,1)------------------------
    x0 -= h;
    y0 += h;
    border GammaHpy(t=0, 2*pi){x=x0+r*cos(t); y=y0+r*sin(t); label = 42;};
    mesh Thpy = buildmesh(Gamma1(n)+Gamma2(n)+Gamma3(n)+Gamma4(n)+GammaHpy(-300));
    fespace Vhpy(Thpy,P1);
    Vhpy upy,uhpy,cpy;
    cpy = 0;
    for (int m=0;m<Thpy.nbe;++m) {
      if (Thpy.be(m).label == 42){
        x = Thpy.be(m)[0].x;
        y = Thpy.be(m)[0].y;
        y -= h;
        cpy[][Thpy.be(m)[0]] = -udy(x,y);
      }
    }
    problem laplacepy(upy,uhpy,solver=CG) =
      int2d(Thpy)(dx(upy)*dx(uhpy)+dy(upy)*dy(uhpy))
      +on(Gamma2,upy=0)
      +on(Gamma4,upy=0)
      +on(42,upy=cpy);
    laplacepy;
    real b = int1d(Thmin,Gamma2)(dx(upy)*(dx(u) - dx(umin)))
      + int1d(Thmin,Gamma4)(dx(upy)*(dx(u) - dx(umin)));
    //
    //-------------ETAPE 3 : CALCUL DE LA DIRECTION DE DESCENTE----------------
    //
    y0 -= h;
    // On déplace le trou selon la direction de descente calculée
    x0 -= (h/sqrt(a*a + b*b)) * a;
    y0 -= (h/sqrt(a*a + b*b)) * b;
    // Update de f et f1
    f1  = f;
    f   = 0.5*(int1d(Thmin,Gamma2)((dx(u) - dx(umin))^2) + int1d(Thmin,Gamma4)((-dx(u) + dx(umin))^2));
    // Calcul de l'erreur sur le gradient
    err = sqrt(a^2 + b^2);
    // Update du pas de déplacement
    if(err < 5*h)
      h /= 5.;
    //
    if(k%2==0)
      {
        if(abs(errpair-err)<eps){
          if (10*h > eps)
            h /= 5.;
	      }
        errpair = err;
      }
    else
      {
        if(abs(errimpair-err)<eps){
          if (10*h > eps)
            h /= 5.;
	      }
	      errimpair = err;
      }
    // Affichage
    cout << "******************************" << endl;
    cout << "* err = " << err << endl;
    cout << "* h = " << h << endl;
    cout << "* k = " << k << endl;
    cout << "* residual = " << abs(f-f1) << endl;
    cout << "* x0 = " << x0 << " | y0 = " << y0 << endl;
    cout << "* deplacement de x0 = " <<  (-(h/sqrt(a*a + b*b))*a) <<"  deplacement de y0 :" <<(h/sqrt(a*a + b*b))*b <<endl;
    cout << "* grad(f) = ( "<< a <<" , "<< b <<" )"<<endl;
    cout << "* f = " << f<<endl;
    cout << "******************************" << endl;
    // Sauvegarde
    tfile << k << " " << x0 << " " << y0 << " " << f << " " << err << endl;
    k++;
  }
